# -*- coding: utf-8 -*-
"""main .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15LAKSzUV1oJyC8aPVuUJTiyJgQVMrRGx
"""

# ‚úÖ Install necessary libraries (only needed in Colab)
!pip install gradio joblib xgboost fpdf

# ‚úÖ Imports
import gradio as gr
import joblib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from fpdf import FPDF

from google.colab import drive
drive.mount('/content/gdrive')

rf_model = joblib.load("/content/gdrive/My Drive/ML_Models/rf_model.pkl")
xgb_model = joblib.load("/content/gdrive/My Drive/ML_Models/xgb_model.pkl")

# Function to predict sales and generate a pie chart
def predict_and_plot(outlet_id, establishment_year, sales_interaction):
    if outlet_id is None or establishment_year is None or sales_interaction is None:
        return "Error: Please fill in all input fields.", None, None

    try:
        input_data = np.array([[outlet_id, establishment_year, sales_interaction]])

        rf_pred = rf_model.predict(input_data)
        xgb_pred = xgb_model.predict(input_data)
        hybrid_pred = (rf_pred + xgb_pred) / 2

        actual_sales = hybrid_pred * np.random.uniform(0.9, 1.1)

        fig, ax = plt.subplots(figsize=(6, 6))
        sales_values = [actual_sales[0], hybrid_pred[0]]
        labels = ['Actual Sales', 'Predicted Sales']
        colors = ['#4CAF50', '#FF5722']

        ax.pie(sales_values, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
        ax.set_title('Actual vs Predicted Sales - Hybrid Model')

        plot_filename = "sales_prediction_piechart.png"
        fig.savefig(plot_filename)

        return f"Predicted Sales: {hybrid_pred[0]:.2f}", plot_filename, plot_filename

    except Exception as e:
        return f"Error during prediction: {str(e)}", None, None


# Function to export predictions (CSV, Excel, or PDF)
def export_predictions(outlet_id, establishment_year, sales_interaction, file_format):
    if outlet_id is None or establishment_year is None or sales_interaction is None:
        return "Error: Please fill in all input fields.", None, None

    if file_format is None:
        return "Error: Please select a file format.", None, None

    try:
        prediction, plot_filename, _ = predict_and_plot(outlet_id, establishment_year, sales_interaction)
        if "Error" in prediction:
            return prediction, None, None

        df = pd.DataFrame({
            "Outlet ID": [outlet_id],
            "Establishment Year": [establishment_year],
            "Sales Interaction": [sales_interaction],
            "Predicted Sales": [prediction]
        })

        file_name = f"predictions.{file_format}"
        if file_format == "csv":
            df.to_csv(file_name, index=False)
        elif file_format == "xlsx":
            df.to_excel(file_name, index=False)
        elif file_format == "pdf":
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt="Sales Prediction Report", ln=True, align='C')
            pdf.ln(10)

            for col in df.columns:
                pdf.cell(200, 10, txt=f"{col}: {df[col][0]}", ln=True)

            if plot_filename:
                pdf.image(plot_filename, x=10, y=None, w=180)

            pdf.output(file_name)

        return f"File exported successfully: {file_name}", file_name, plot_filename
    except Exception as e:
        return f"Error during export: {str(e)}", None, None


# Gradio Interface
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("""
    <h1 style='text-align: center;'>üìä Sales Prediction & Visualization</h1>
    <p style='text-align: center;'>Enter details to predict item outlet sales and view actual vs. predicted values.</p>
    """)

    with gr.Row():
        with gr.Column():
            outlet_id = gr.Number(label="üè™ Outlet ID", precision=0)
            establishment_year = gr.Number(label="üìÖ Establishment Year", precision=0)
            sales_interaction = gr.Number(label="üìà Outlet_Age_Sales_Interaction", precision=2)
            file_format = gr.Radio(["csv", "xlsx", "pdf"], label="üìÇ Export Format")
            predict_btn = gr.Button("üîÆ Predict Sales")
            export_btn = gr.Button("üìÇ Export Prediction")

        with gr.Column():
            prediction_output = gr.Textbox(label="üìä Predicted Sales", interactive=False)
            plot_output = gr.Image(label="üìä Prediction Pie Chart")
            export_status = gr.Textbox(label="üìÇ Export Status", interactive=False)
            download_link = gr.File(label="üìÇ Download Prediction File")
            plot_download = gr.File(label="üìä Download Pie Chart")

    predict_btn.click(predict_and_plot,
                      inputs=[outlet_id, establishment_year, sales_interaction],
                      outputs=[prediction_output, plot_output, plot_download])

    export_btn.click(export_predictions,
                     inputs=[outlet_id, establishment_year, sales_interaction, file_format],
                     outputs=[export_status, download_link, plot_download])

demo.launch()